#! /usr/bin/env python

import sys
for arg in sys.argv:
    print arg

from os.path import join
import os
import time
import numpy as np
import glob
import astropy.cosmology as co
cosmo = co.Planck13
#cosmo=co.FlatLambdaCDM(H0=70,Om0=0.3)

# for one galaxy spectrum
import GalaxySpectrumFIREFLY as gs
import StellarPopulationModel as spm

plate = sys.argv[1]
mjd = sys.argv[2]
fiber = sys.argv[3]

def runSpec(specLiteFile):
	baseN = os.path.basename(specLiteFile).split('-')
	plate = baseN[1] #7457# sys.argv[1] #7619
	mjd = baseN[2] # 56746#sys.argv[2] # 56900
	fibre = baseN[3] # 471#sys.argv[3] #300
	# path to lite spectra
	#specLiteFile = join( os.environ['SDSSDR12_DIR'], str(plate), 'spec-'+str(plate)+ '-'+str(mjd)+'-' +str(fibre).zfill(4)+'.fits')
	# join( os.environ['BOSS_SPECTRO_REDUX'], os.environ['RUN2D'], 'spectra', 'lite' , str(plate), 'spec-'+str(plate)+ '-'+str(mjd)+'-' +str(fibre).zfill(4)+'.fits')
	outputFolder = join( os.environ['SDSSDR12_DIR'], 'stellarpop-m11-kroupa', 'stellarpop', str(plate))
	if os.path.isdir(outputFolder)==False:
		os.mkdir(outputFolder)

	print( specLiteFile )
	t0=time.time()
	if int(plate)<=2974:
		spec=gs.GalaxySpectrumFIREFLY(specLiteFile, milky_way_reddening=True, survey='sdssMain')
		spec.openObservedSDSSSpectrum()
		ageMax = np.log10(cosmo.age(spec.redshift).value*1e9)
		print spec.redshift,  spec.hdulist[2].data['CLASS'][0], spec.hdulist[2].data['ZWARNING'][0], spec.hdulist[2].data['Z_ERR'][0]
		#if spec.redshift>0 and spec.redshift<1.7 and spec.hdulist[2].data['CLASS'][0]=="GALAXY" :#and spec.hdulist[2].data['ZWARNING'][0] ==0 :
		print spec.hdulist[2].data.dtype
		if spec.hdulist[2].data['CLASS'][0]=="GALAXY" and spec.hdulist[2].data['Z'][0] >  spec.hdulist[2].data['Z_ERR'][0] and spec.hdulist[2].data['Z_ERR'][0]>0 and spec.hdulist[2].data['ZWARNING'][0] ==0 and abs(spec.hdulist[2].data['Z'][0] - spec.hdulist[2].data['Z'][0])>abs(spec.hdulist[2].data['Z_ERR'][0]):
			model = spm.StellarPopulationModel(spec, join(outputFolder , os.path.basename(specLiteFile)[:-5] ), cosmo, models = 'm11', model_libs = ['MILES'], imfs = ['kr'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'vacuum', Z_limits = [-3.,1.],suffix="-SPM-MILES.fits", use_downgraded_models = True)
			try :
				model.fit_models_to_data()
				#model = spm.StellarPopulationModel(spec, join( outputFolder , specLiteFile.split('/')[-1][:-5]), cosmo, models = 'm11', model_libs = ['STELIB'], imfs = ['ss'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'vacuum', Z_limits = [-3.,1.],suffix="-SPM-STELIB.fits", use_downgraded_models = True)
				#model.fit_models_to_data()
				#print( model.averages )
			except (ValueError):
				pass

		print "time used =", time.time()-t0 ,"seconds"
		return spec

	else :
		spec=gs.GalaxySpectrumFIREFLY(specLiteFile, milky_way_reddening=True, survey='sdss3')
		spec.openObservedSDSSSpectrum()
		ageMax = np.log10(cosmo.age(spec.redshift).value*1e9)
		print spec.redshift,  spec.hdulist[2].data['CLASS_NOQSO'][0], spec.hdulist[2].data['ZWARNING_NOQSO'][0]
		#if spec.redshift>0 and spec.redshift<1.7 and spec.hdulist[2].data['CLASS'][0]=="GALAXY" :#and spec.hdulist[2].data['ZWARNING'][0] ==0 :
		print spec.hdulist[2].data.dtype
		if spec.hdulist[2].data['CLASS_NOQSO'][0]=="GALAXY" and spec.hdulist[2].data['Z_NOQSO'][0] >  spec.hdulist[2].data['Z_ERR_NOQSO'][0] and spec.hdulist[2].data['Z_ERR_NOQSO'][0]>0 and spec.hdulist[2].data['ZWARNING'][0] ==0 and abs(spec.hdulist[2].data['Z_NOQSO'][0] - spec.hdulist[2].data['Z'][0])>abs(spec.hdulist[2].data['Z_ERR_NOQSO'][0]):
			model = spm.StellarPopulationModel(spec, join(outputFolder , os.path.basename(specLiteFile)[:-5] ), cosmo, models = 'm11', model_libs = ['MILES'], imfs = ['kr'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'vacuum', Z_limits = [-3.,1.],suffix="-SPM-MILES.fits", use_downgraded_models = True)
			try :
				model.fit_models_to_data()
				#model = spm.StellarPopulationModel(spec, join( outputFolder , specLiteFile.split('/')[-1][:-5]), cosmo, models = 'm11', model_libs = ['STELIB'], imfs = ['ss'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'vacuum', Z_limits = [-3.,1.],suffix="-SPM-STELIB.fits", use_downgraded_models = True)
				#model.fit_models_to_data()
				#print( model.averages )
			except (ValueError):
				print "issue somewhere"
				pass

		print "time used =", time.time()-t0 ,"seconds"
		return spec

specFile = join( os.environ['SDSSDR12_DIR'], 'spectra', str(plate.zfill(4)), 'spec-'+plate.zfill(4)+'-'+mjd+'-'+fiber.zfill(4)+'.fits')
print specFile
spec = runSpec(specFile)