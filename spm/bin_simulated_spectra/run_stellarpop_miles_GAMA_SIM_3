#! /usr/bin/env python

import sys
from os.path import join
import os
import time
import numpy as np
import glob
import astropy.cosmology as co
cosmo = co.Planck13
import astropy.io.fits as fits

# for one galaxy spectrum
import GalaxySpectrumFIREFLY as gs
import StellarPopulationModel as spm

inputFolder = join( os.environ['DATA_DIR'], "spm", "GAMAmock")
outputFolder = join( os.environ['DATA_DIR'], "spm", "GAMAmock", 'stellarpop')

def runSpec(filename, outname):
	spec=gs.GalaxySpectrumFIREFLY(filename, milky_way_reddening=False)
	spec.openGAMAsimulatedSpectrum(error_multiplicative_factor = 0.5)
	ageMax = np.log10(cosmo.age(spec.redshift).value*1e9)
	#model = spm.StellarPopulationModel(spec, outname, cosmo, models = 'm11', model_libs = ['MILES'], imfs = ['cha'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'air', Z_limits = [-3.,1.], suffix="-emf01-miles-cha.fits", use_downgraded_models = True)
	#model.fit_models_to_data()
	#
	#model = spm.StellarPopulationModel(spec, outname, cosmo, models = 'm11', model_libs = ['ELODIE'], imfs = ['cha'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'air', Z_limits = [-3.,1.], suffix="-emf01-elodie-cha.fits", use_downgraded_models = True)
	#model.fit_models_to_data()
	#
	#model = spm.StellarPopulationModel(spec, outname, cosmo, models = 'm11', model_libs = ['STELIB'], imfs = ['cha'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'air', Z_limits = [-3.,1.], suffix="-emf01-telib-cha.fits", use_downgraded_models = True)
	#model.fit_models_to_data()
	#
	#model = spm.StellarPopulationModel(spec, outname, cosmo, models = 'm11', model_libs = ['MILES'], imfs = ['ss'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'air', Z_limits = [-3.,1.], suffix="-emf01-miles-ss.fits", use_downgraded_models = True)
	#model.fit_models_to_data()
	#
	#model = spm.StellarPopulationModel(spec, outname, cosmo, models = 'm11', model_libs = ['ELODIE'], imfs = ['ss'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'air', Z_limits = [-3.,1.], suffix="-emf01-elodie-ss.fits", use_downgraded_models = True)
	#model.fit_models_to_data()
    #
	#model = spm.StellarPopulationModel(spec, outname, cosmo, models = 'm11', model_libs = ['STELIB'], imfs = ['ss'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'air', Z_limits = [-3.,1.], suffix="-emf01-stelib-ss.fits", use_downgraded_models = True)
	#model.fit_models_to_data()

	model = spm.StellarPopulationModel(spec, outname, cosmo, models = 'm11', model_libs = ['MILES'], imfs = ['kr'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'air', Z_limits = [-3.,1.], suffix="-emf05-miles-kr.fits", use_downgraded_models = True)
	model.fit_models_to_data()

	#model = spm.StellarPopulationModel(spec, outname, cosmo, models = 'm11', model_libs = ['ELODIE'], imfs = ['kr'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'air', Z_limits = [-3.,1.], suffix="-emf01-elodie-kr.fits", use_downgraded_models = True)
	#model.fit_models_to_data()
    #
	#model = spm.StellarPopulationModel(spec, outname, cosmo, models = 'm11', model_libs = ['STELIB'], imfs = ['kr'], age_limits = [6,10], downgrade_models = True, data_wave_medium = 'air', Z_limits = [-3.,1.], suffix="-emf01-stelib-kr.fits", use_downgraded_models = True)
	#model.fit_models_to_data()


filenames = np.array(glob.glob(os.path.join(inputFolder, "gal_*.dat")))
filenames.sort()
print len(filenames)
#np.random.shuffle(filenames)

for filename in filenames:
	outname = join(outputFolder , os.path.basename(filename)[:-4] )
	if len(glob.glob(outname+"*fits"))==12:
		print outname
	else:	
		runSpec(filename, outname)
			
