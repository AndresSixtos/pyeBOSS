#! /usr/bin/env python

from ModelSpectraStacks import *
import glob
stack_files=n.array(glob.glob( join( os.environ['DATA_DIR'], "*", "products", "emissionLineLuminosityFunctions", "??_????", "*stack*e+??.fits" ) ) )

stack_files = n.hstack(( stack_files_1, stack_files_2 ))

stack_files.sort()

#print stack_files

for file in stack_files:
	print( file )
	mm=ModelSpectraStacks(file)
	#mm.plot_fit()
	#mm.fit_lines_to_lineSpectrum()
	#mm.compute_derived_quantities()
	#mm.save_spectrum()
	#mm.plot_spectrum()

	age ='age = ' +  str(n.round( 10**mm.hdu2.header['light_age'] ,3))+ '+('+ str(n.round( 10**mm.hdu2.header['light_age_up']-10**mm.hdu2.header['light_age'] ,3)) +')-('+str(n.round( 10**mm.hdu2.header['light_age']-10**mm.hdu2.header['light_age_low'] ,3))+') Gyr'

	metallicity = 'log(Z/Zsun) = ' + str(n.round( mm.hdu2.header['light_metallicity'] ,3))+ '+('+ str(n.round( mm.hdu2.header['light_metallicity_up'] - mm.hdu2.header['light_metallicity'] ,3)) +')-('+str(n.round( mm.hdu2.header['light_metallicity'] - mm.hdu2.header['light_metallicity_low'] ,3))+')'

	mass = 'log(M/Msun) = ' + str(n.round( mm.hdu2.header['stellar_mass'] ,3))+ '+('+ str(n.round( mm.hdu2.header['stellar_mass_up'] - mm.hdu2.header['stellar_mass'] ,3)) +')-('+str(n.round( mm.hdu2.header['stellar_mass'] - mm.hdu2.header['stellar_mass_low'] ,3))+')'

	fig = p.figure(0,(10,10))
	fig.subplots_adjust(hspace=0.5,wspace=0.5)
	# defines the first panel
	fig.add_subplot(4,1,1)
	p.plot(mm.wl, mm.fl,'r',label='galaxy',rasterized=True,lw=0.5)
	p.plot(mm.wlLineSpectrum, mm.model(mm.wlLineSpectrum),'b', label='model',rasterized=True)
	p.legend(loc=4)
	#p.xlabel('wavelength')
	p.ylabel(r'$f_\lambda$')
	#p.yscale('log')
	p.xlim((n.min(mm.wlLineSpectrum),n.max(mm.wlLineSpectrum)))
	p.ylim((n.min(mm.model(mm.wlLineSpectrum)),n.max(mm.model(mm.wlLineSpectrum))))
	p.grid()

	fig.add_subplot(4,1,2)
	p.plot(mm.wlLineSpectrum, mm.flLineSpectrum, 'k',label='galaxy - model',rasterized=True) #, flErrLineSpectrum
	p.plot(mm.wlLineSpectrum, mm.stackErr(mm.wlLineSpectrum),  'r' , label=' error on data ',rasterized=True)
	p.legend(loc=2)
	#p.xlabel('wavelength')
	p.ylabel(r'$f_\lambda$')
	#p.yscale('log')
	p.xlim((n.min(mm.wlLineSpectrum),n.max(mm.wlLineSpectrum)))
	p.ylim(( n.min( mm.stackErr(mm.wlLineSpectrum))/3., n.max( mm.stackErr( mm.wlLineSpectrum )) *3.))
	p.grid()

	fig.add_subplot(4,1,3)
	p.plot(mm.wlLineSpectrum, mm.fl_frac_LineSpectrum, 'k',label='galaxy/model',rasterized=True) #, flErrLineSpectrum
	p.plot(mm.wlLineSpectrum, n.ones_like(mm.stack(mm.wlLineSpectrum)) + mm.stackErr( mm.wlLineSpectrum) / mm.stack(mm.wlLineSpectrum),  'r' , label=' frac error on data ',rasterized=True)
	p.legend(loc=4)
	p.xlabel('wavelength')
	p.ylabel(r'$f_\lambda$')
	#p.yscale('log')
	p.xlim((n.min(mm.wlLineSpectrum),n.max(mm.wlLineSpectrum)))
	p.ylim((0.5,1.5))
	p.grid()

	fig.add_subplot(4,1,4,frame_on=False)
	p.text(0,1,mm.stack_file.split('/')[-1]+ ", redshift="+str(n.round(mm.redshift,3)) )
	p.text(0,0.8,age)
	p.text(0,0.6,metallicity)
	p.text(0,0.4,mass)
	p.tick_params(axis='both', which='both', left='off', right='off', bottom='off', top='off', labelbottom='off', labelleft='off')

	p.savefig(mm.stack_file[:-5] + ".pdf")
	p.clf()
