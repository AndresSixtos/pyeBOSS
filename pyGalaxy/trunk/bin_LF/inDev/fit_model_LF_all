#!/usr/bin/env python

"""
This script fits models to the estimated line LFs.
"""

import astropy.units as uu
import astropy.cosmology as co
aa = co.Planck13
#aah = co.FlatLambdaCDM(H0=100.0 *uu.km / (uu.Mpc *uu.s), Om0=0.307, Tcmb0=2.725 *uu.K, Neff=3.05, m_nu=[ 0.  ,  0. ,   0.06]*uu.eV, Ob0=0.0483)
#rhom = aa.critical_density0.to(uu.solMass*uu.Mpc**-3).value
#aa.critical_density0.to(uu.solMass*uu.Mpc**-3).value
#aah.critical_density0.to(uu.solMass*uu.Mpc**-3).value

from mpl_toolkits.mplot3d import Axes3D
from scipy.interpolate import interp1d
import numpy as n
import matplotlib
#matplotlib.use('pdf')
matplotlib.rcParams['font.size']=12
import matplotlib.pyplot as p
import glob
import sys
from scipy.optimize import curve_fit
import cPickle
from os.path import join
from scipy.optimize import minimize
import cPickle
import glob
Ns = 3




dataDir = join("..", "data","O3_5007")
plotDir = join("..", "plots")
lineDict = {'O2_3728' : r'$[O^{3728}_{II}]$', 'O3_5007' : r'$[O^{5007}_{III}]$', 'H1_4862' : r'$H^{4861}_{\beta}$', 'H1_6564': r'$H^{6564}_{\alpha}$'}

dataList = glob.glob(join(dataDir,"O3_5007*.txt"))
dataList.sort()

f = open(join("..", "data" , "O3_5007-data-luminosity-limits-Planck15.txt"),'r')
lines = f.readlines()
lmins, lmaxs, fileNames = [], [], []
for line in lines[1:] :
	lmins.append( float(line.split()[0]) )
	lmaxs.append( float(line.split()[1]) )
	fileNames.append(line.split()[2])
	
f.close()

dictLmin = { fileNames[ii]: lmins[ii] for ii in range(len(fileNames)) }
dictLmax = { fileNames[ii]: lmaxs[ii] for ii in range(len(fileNames)) }


data=[]
for el in dataList:
	dat = n.loadtxt(el,unpack=True)
	sl = (n.log10(dat[3]) > dictLmin[el.split('\\')[-1]] )&(n.log10(dat[3]) < dictLmax[el.split('\\')[-1]]) & (dat[6]>0)&(dat[7]>0)
	data.append(dat.T[sl].T)
	
data = n.hstack(data)

head= "z_mean z_min z_max L_mean L_min L_max phi_mean phi_min phi_max  Ngalaxy"
f=open(join("..", "data" , "O3_5007-data-summary-Planck15.txt"),'w')
n.savetxt(f, data.T, header= head)
f.close()


z_mean, z_min, z_max, L_mean, L_min, L_max, phi_mean, phi_min, phi_max,  Ngalaxy = n.loadtxt(join("..", "data" , "O3_5007-data-summary-Planck15.txt"), unpack = True)

p.figure(0,(6,6))
p.axes([0.17,0.17,0.75,0.75])
sc1=p.scatter(L_mean, phi_mean, c=z_mean,s=10, marker='o',label="data", rasterized=True,vmin=0,vmax=1.)
sc1.set_edgecolor('face')
cb = p.colorbar(shrink=0.8)
cb.set_label("redshift")
p.xlabel(r'$log_{10}(L$'+lineDict['O3_5007']+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((1e-7,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(plotDir, "O3_5007_data_LF.pdf"))
p.clf()

from scipy.optimize import minimize

zs=n.arange(0,1.,0.05)
ls= n.arange(39,44.1,0.25)

zArr, lArr = n.meshgrid(zs,ls)

zPl= n.hstack(zArr)
lPl = n.hstack(lArr)


logls = lambda z, l0, l1 : l0 +l1 * z 
ps = lambda z,  p0, p1 : p0+ p1 *z
alpha = lambda z, a0, a1 : a0 + a1*z
LF_Fun=lambda logl, z, l0, l1, p0, p1,a0, a1, s0 : 10**(p0+ p1 *z) * (10**logl/10**( l0 +l1 * z ))**(a0 + a1*z+1) * n.e**( -n.log10( 1 +10**logl/10**(l0 +l1 * z ))**2./(2*(s0 )**2.))

LFbis = lambda logl, z, prm : LF_Fun(logl, z, prm[0], prm[1], prm[2], prm[3], prm[4], prm[5], prm[6])

chi2Fun = lambda prm : n.sum( (LFbis(n.log10(L_mean),z_mean,prm) - phi_mean)**2. / ((phi_max-phi_min))**2. )/(len(phi_mean)-7)


prm0= n.array([ 40.6, 0.695, -2.22, 0.017, -1.43, -0.125, 0.462])
res = minimize(chi2Fun, prm0, method='Powell',options={'xtol': 1e-6, 'disp': True, 'maxiter' : 5000000000, 'nfev': 180000000})


zs=n.arange(0,1.,0.05)
ls= n.arange(39,44.1,0.055)

zArr, lArr = n.meshgrid(zs,ls)

zPl= n.hstack(zArr)
lPl = n.hstack(lArr)
phiPl = LFbis(lPl,zPl,res.x)


p.figure(0,(6,6))
p.axes([0.17,0.17,0.75,0.75])
sc1=p.scatter(10**lPl, phiPl, c=zPl,s=5, marker='o',label="model", rasterized=True,vmin=0,vmax=1.)
sc1.set_edgecolor('face')
cb = p.colorbar(shrink=0.8)
cb.set_label("redshift")
p.xlabel(r'$log_{10}(L$'+lineDict['O3_5007']+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((1e-7,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(plotDir, "O3_5007_model_LF.pdf"))
p.clf()


chi2 = (LFbis(n.log10(L_mean), z_mean, res.x) - phi_mean)**2. / (2.*(phi_max-phi_min))**2.

p.figure(0,(6,6))
p.axes([0.17,0.17,0.75,0.75])
sc1=p.scatter(L_mean, z_mean, c=chi2,s=20, marker='o', rasterized=True,vmin=0,vmax=5)
sc1.set_edgecolor('face')
cb = p.colorbar(shrink=0.8)
cb.set_label(r"$\chi^2$ per point")
p.xlabel(r'$log_{10}(L$'+lineDict['O3_5007']+'$)$ [erg s$^{-1}$]')
p.ylabel('redshift')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((0,1.7))
p.grid()
p.savefig(join(plotDir, "O3_5007_model_chi2_LF.pdf"))
p.clf()

f=open("fitResult_O3_5007.txt",'w')
cPickle.dump(res,f)
f.close()

cov = abs(res.direc)

f=open("fitResultEqn_O3_5007.txt",'w')
line1 = r"log_{10}(L_*) & =("+ str(n.round(res.x[0],Ns))+ r"\pm "+ str(n.round(cov[0][0]**0.5,Ns))+ ") + z ("+ str(n.round(res.x[1],Ns))+ r"\pm "+ str(n.round(cov[1][1]**0.5,Ns))+") \\\\"
line2 = r"log_{10}(\Phi_*) & =("+ str(n.round(res.x[2],Ns))+ r"\pm "+ str(n.round(cov[2][2]**0.5,Ns))+ ") + z ("+ str(n.round(res.x[3],Ns))+ r"\pm "+ str(n.round(cov[3][3]**0.5,Ns))+") \\\\"
line3 = r"\alpha & =("+ str(n.round(res.x[4],Ns))+ r"\pm "+ str(n.round(cov[4][4]**0.5,Ns))+ ") + z ("+ str(n.round(res.x[5],Ns))+ r"\pm "+ str(n.round(cov[5][5]**0.5,Ns))+") \\\\"
line4 = r"\sigma & =("+ str(n.round(res.x[6],Ns))+ r"\pm "+ str(n.round(cov[6][6]**0.5,Ns))+ ")"
f.write(line1 + "\n")
f.write(line2 + "\n")
f.write(line3 + "\n")
f.write(line4 + "\n")
f.close()


sys.exit()











dataDir = join("..", "data","O2_3728")
plotDir = join("..", "plots")
lineDict = {'O2_3728' : r'$[O^{3728}_{II}]$', 'O3_5007' : r'$[O^{5007}_{III}]$', 'H1_4862' : r'$H^{4861}_{\beta}$', 'H1_6564': r'$H^{6564}_{\alpha}$'}



dataList = glob.glob(join(dataDir,"O2_3728*.txt"))
dataList.sort()

f = open(join("..", "data" , "O2_3728-data-luminosity-limits-Planck15.txt"),'r')
lines = f.readlines()
lmins, lmaxs, fileNames = [], [], []
for line in lines[1:] :
	lmins.append( float(line.split()[0]) )
	lmaxs.append( float(line.split()[1]) )
	fileNames.append(line.split()[2])
	
f.close()

dictLmin = { fileNames[ii]: lmins[ii] for ii in range(len(fileNames)) }
dictLmax = { fileNames[ii]: lmaxs[ii] for ii in range(len(fileNames)) }


data=[]
for el in dataList:
	dat = n.loadtxt(el,unpack=True)
	sl = (n.log10(dat[3]) > dictLmin[el.split('\\')[-1]] )&(n.log10(dat[3]) < dictLmax[el.split('\\')[-1]]) & (dat[6]>0)&(dat[7]>0)
	data.append(dat.T[sl].T)
	
data = n.hstack(data)

head= "z_mean z_min z_max L_mean L_min L_max phi_mean phi_min phi_max  Ngalaxy"
f=open(join("..", "data" , "O2_3728-data-summary-Planck15.txt"),'w')
n.savetxt(f, data.T, header= head)
f.close()


z_mean, z_min, z_max, L_mean, L_min, L_max, phi_mean, phi_min, phi_max,  Ngalaxy = n.loadtxt(join("..", "data" , "O2_3728-data-summary-Planck15.txt"), unpack = True)

p.figure(0,(6,6))
p.axes([0.17,0.17,0.75,0.75])
sc1=p.scatter(L_mean, phi_mean, c=z_mean,s=10, marker='o',label="data", rasterized=True,vmin=0,vmax=1.8)
sc1.set_edgecolor('face')
cb = p.colorbar(shrink=0.8)
cb.set_label("redshift")
p.xlabel(r'$log_{10}(L$'+lineDict['O2_3728']+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((1e-7,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(plotDir, "O2_3728_data_LF.pdf"))
p.clf()

from scipy.optimize import minimize
logls = lambda z:  -0.182 * z + 41.272
ps = lambda z:   0.741 * z + -2.78 
alpha = -1.8
sig = 0.53

saundersFctFit=lambda logl, z, : 10**ps(z) * (10**logl/10**logls(z))**(alpha+1) * n.e**( -n.log10( 1 +10**logl/10**logls(z))**2./(2*sig**2.))

zs=n.arange(0,1.8,0.05)
ls= n.arange(39,44.1,0.25)

zArr, lArr = n.meshgrid(zs,ls)

zPl= n.hstack(zArr)
lPl = n.hstack(lArr)
phiPl = saundersFctFit(lPl,zPl)


logls = lambda z, l0, l1 : l0 +l1 * z 
ps = lambda z,  p0, p1 : p0+ p1 *z
alpha = lambda z, a0, a1 : a0 + a1*z

LF_Fun=lambda logl, z, l0, l1, p0, p1,a0, a1, s0 : 10**(p0+ p1 *z) * (10**logl/10**( l0 +l1 * z ))**(a0 + a1*z+1) * n.e**( -n.log10( 1 +10**logl/10**(l0 +l1 * z ))**2./(2*(s0 )**2.))

LFbis = lambda logl, z, prm : LF_Fun(logl, z, prm[0], prm[1], prm[2], prm[3], prm[4], prm[5], prm[6])

chi2Fun = lambda prm : n.sum( (LFbis(n.log10(L_mean),z_mean,prm) - phi_mean)**2. / (2*(phi_max-phi_min))**2. )/(len(phi_mean)-7)


prm0= n.array([ 42., 0., -3., 0., -1.8, 0., 0.5])
res = minimize(chi2Fun, prm0, method='Powell',options={'xtol': 1e-6, 'disp': True, 'maxiter' : 5000000000, 'nfev': 180000000})


zs=n.arange(0,1.8,0.05)
ls= n.arange(39,44.1,0.055)

zArr, lArr = n.meshgrid(zs,ls)

zPl= n.hstack(zArr)
lPl = n.hstack(lArr)
phiPl = LFbis(lPl,zPl,res.x)


p.figure(0,(6,6))
p.axes([0.17,0.17,0.75,0.75])
sc1=p.scatter(10**lPl, phiPl, c=zPl,s=5, marker='o',label="model", rasterized=True,vmin=0,vmax=1.8)
sc1.set_edgecolor('face')
cb = p.colorbar(shrink=0.8)
cb.set_label("redshift")
p.xlabel(r'$log_{10}(L$'+lineDict['O2_3728']+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((1e-7,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(plotDir, "O2_3728_model_LF.pdf"))
p.clf()

z_mean, z_min, z_max, L_mean, L_min, L_max, phi_mean, phi_min, phi_max,  Ngalaxy = n.loadtxt(join("..", "data" , "O2_3728-data-summary-Planck15.txt"), unpack = True)

chi2 = (LFbis(n.log10(L_mean), z_mean, res.x) - phi_mean)**2. / (2.*(phi_max-phi_min))**2.

p.figure(0,(6,6))
p.axes([0.17,0.17,0.75,0.75])
sc1=p.scatter(L_mean, z_mean, c=chi2,s=20, marker='o', rasterized=True,vmin=0,vmax=5)
sc1.set_edgecolor('face')
cb = p.colorbar(shrink=0.8)
cb.set_label(r"$\chi^2$ per point")
p.xlabel(r'$log_{10}(L$'+lineDict['O2_3728']+'$)$ [erg s$^{-1}$]')
p.ylabel('redshift')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((0,1.7))
p.grid()
p.savefig(join(plotDir, "O2_3728_model_chi2_LF.pdf"))
p.clf()

f=open("fitResult.txt",'w')
cPickle.dump(res,f)
f.close()

cov = abs(res.direc)

f=open("fitResultEqn.txt",'w')
line1 = r"log_{10}(L_*) & =("+ str(n.round(res.x[0],Ns))+ r"\pm "+ str(n.round(cov[0][0]**0.5,Ns))+ ") + z ("+ str(n.round(res.x[1],Ns))+ r"\pm "+ str(n.round(cov[1][1]**0.5,Ns))+") \\\\"
line2 = r"log_{10}(\Phi_*) & =("+ str(n.round(res.x[2],Ns))+ r"\pm "+ str(n.round(cov[2][2]**0.5,Ns))+ ") + z ("+ str(n.round(res.x[3],Ns))+ r"\pm "+ str(n.round(cov[3][3]**0.5,Ns))+") \\\\"
line3 = r"\alpha & =("+ str(n.round(res.x[4],Ns))+ r"\pm "+ str(n.round(cov[4][4]**0.5,Ns))+ ") + z ("+ str(n.round(res.x[5],Ns))+ r"\pm "+ str(n.round(cov[5][5]**0.5,Ns))+") \\\\"
line4 = r"\sigma & =("+ str(n.round(res.x[6],Ns))+ r"\pm "+ str(n.round(cov[6][6]**0.5,Ns))+ ")"
f.write(line1 + "\n")
f.write(line2 + "\n")
f.write(line3 + "\n")
f.write(line4 + "\n")
f.close()


sys.exit()


























p.figure(0,(6,6))
p.axes([0.17,0.17,0.75,0.75])
sc1=p.scatter(10**lPl, phiPl, c=zPl,s=10, marker='o',label="model", rasterized=True)
sc1.set_edgecolor('face')
cb = p.colorbar(shrink=0.8)
cb.set_label("redshift")
p.xlabel(r'$log_{10}(L$'+lineDict['O2_3728']+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((1e-7,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(plotDir, "O2_3728_model_LF.pdf"))
p.show()
p.clf()





vfG = lambda v, z, A1, vcut1, a1, b1 : n.log10( 10**(A0 + A1 * z) * (1+ (10**v/10**(vcut0 + vcut1 * z))**(b0 + b1 * z) )* n.e**(- (10**v/10**(vcut0 + vcut1 * z))**(a0 +a1*z) ))
vfGbis = lambda v, z, ps : vfG(v,z,ps[0],ps[1],ps[2],ps[3])
chi2fun = lambda ps : n.sum( (vfGbis(M200c,redshift,ps) - yData)**2. / (n.ones_like(yData)*0.05)**2. )/len(yData)
p1 = n.array([ 0., 0., 0., 0.])
print "looks for the optimum parameters"
res = minimize(chi2fun, p1, method='Powell',options={'xtol': 1e-6, 'disp': True, 'maxiter' : 50000000, 'nfev': 1800000})

print "ndof=",len(yData)
print res
A1, vcut1, a1, b1 = n.round(res.x,4)

print "A(z) & = "+str(A0)+" + "+str(A1)+r'\times z \\'
print r" M_{cut}(z) & = "+str(vcut0)+" + "+str(vcut1)+r'\times z \\'
print r" \alpha(z) & = "+str(a0)+" + "+str(a1)+r'\times z \\' #+ '+str(a2)+r'\times z^2 \\'
print r" \beta(z) & = "+str(b0)+" + "+str(b1)+r'\times z \\'


p.figure(0,(6,6))
p.axes([0.17,0.17,0.75,0.75])
sc1=p.scatter(L_mean, phi_mean, c=z_mean,s=10, marker='o',label="model", rasterized=True)
sc1.set_edgecolor('face')
cb = p.colorbar(shrink=0.8)
cb.set_label("redshift")
p.xlabel(r'$log_{10}(L$'+lineDict['O2_3728']+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((1e-7,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(plotDir, "O2_3728_data_LF.pdf"))
p.show()
p.clf()





p.xlabel(r'log$_{10}[M_{200c}/(h^{-1}M_\odot)]$')
p.ylabel(r' n(>M)') # log$_{10}[ n(>M)]')
p.legend(loc=3)
p.ylim((-9,0))
p.grid()
p.show()

p.savefig("M200c-cumulative-function-model.pdf")
p.clf()



sys.exit()

"""

modelDict = {'Saunders2P':self.saundersFct2P, 'Saunders3P':self.saundersFct3P, 'Saunders': self.saundersFct, 'Schechter': self.schecterFct, 'DoublePL' : self.doublePL }
self.model = model
self.model_to_fit = modelDict[self.model]

lmins = n.array([])
lmaxs = n.array([])
"""
self.saundersFct=lambda logl,logls,ps,a,sig : ps * (10**logl/10**logls)**(a+1) * n.e**( -n.log10( 1 +10**logl/10**logls)**2./(2*sig**2.))
self.saundersFct3P=lambda logl,logls,ps,a : self.saundersFct(logl, logls, ps, a, self.fixedSigma)
self.saundersFct2P=lambda logl,logls,ps : self.saundersFct(logl, logls, ps, self.fixedAlpha, self.fixedSigma)
 
mf = lambda v, A, v0, alpha, beta : 10**A * (v/10**v0)**beta * n.e**(- (v/10**v0)**alpha )

# limits at z0
limits_04 = [1e10, 5e12]
limits_10 = [5e11, 5e13]
limits_25 = [5e12, 5e14]
limits_40 = [1e13, 5e15]
zmin = 0.
zmax = 4

NDecimal = 3

dir = join("D:","\data","BigMD","M200cFunction")

qty_limits = n.array([limits_04, limits_10, limits_25, limits_40])
volume_boxes =  n.array([400.**3., 1000**3., 2500**3., 4000.**3.])

cos = "Central" # centrak or satellite ?
qty = "M200c"

print "we consider the ",type,"of",qty,"of", cos
print "in the redshift range",zmin,zmax
#print zList_files
print "within the following limits for each box",qty_limits
print "each box has a volume of",volume_boxes, "Mpc3/h3"



xData_04,z_04,yData_04,yDataErr_04 = n.loadtxt(join(dir,"hist-Central-M200c_ALL_cumulative_MD_0.4Gpc.dat"),unpack=True)
xData_10,z_10,yData_10,yDataErr_10 = n.loadtxt(join(dir,"hist-Central-M200c_ALL_cumulative_MD_1Gpc.dat"),unpack=True)
xData_25,z_25,yData_25,yDataErr_25 = n.loadtxt(join(dir,"hist-Central-M200c_ALL_cumulative_MD_2.5Gpc.dat"),unpack=True)
xData_40,z_40,yData_40,yDataErr_40 = n.loadtxt(join(dir,"hist-Central-M200c_ALL_cumulative_MD_4Gpc.dat"),unpack=True)

s_04 = (z_04 >= 0.0) & (z_04 <= zmax)
s_10 = (z_10 >= 0.0) & (z_10 <= zmax)
s_25 = (z_25 >= 0.0) & (z_25 <= zmax)
s_40 = (z_40 >= 0.0) & (z_40 <= zmax)

redshift = n.hstack(( z_04[s_04], z_10[s_10], z_25[s_25], z_40[s_40]))
print "all redshifts available:", set(redshift)
M200c = n.log10(n.hstack(( xData_04[s_04], xData_10[s_10], xData_25[s_25], xData_40[s_40])))
print "min and max masses available:", n.min(M200c), n.max(M200c)
yData = n.log10(n.hstack(( yData_04[s_04], yData_10[s_10], yData_25[s_25], yData_40[s_40])))
print "min and max Y available:", n.min(yData), n.max(yData)
yDataErr = abs(n.hstack(( yDataErr_04[s_04], yDataErr_10[s_10], yDataErr_25[s_25], yDataErr_40[s_40])) / yData)
print "min and max Y error available:", n.min(yDataErr), n.max(yDataErr)

vcut0 = 13.826 # 13.8425
vcut1 = -0.832 # -0.8762
vcut2 =0.021 #  0.0414

b0 = -0.876 # -0.8749
b1 = -0.009 # -0.0124
b2 = -0.011 # -0.0090

a0 = 0.578# 0.5702
a1 = -0.089 # -0.072
a2 = 0.02 # 0.014

A0 = -4.009 # -4.0178
A1 = 0.799 # 0.8232
A2 = -0.06 # -0.0714


vfG = lambda v, z : n.log10( 10**(A0 + A1 * z) * ((10**v/10**(vcut0 + vcut1 * z))**(b0 + b1 * z) )* n.e**(- (10**v/10**(vcut0 + vcut1 * z))**(a0 +a1*z) ))

vfG = lambda v, z : n.log10( 10**(A0 + A1 * z + A2*z*z) * ((10**v/10**(vcut0 + vcut1 * z + vcut2*z*z))**(b0 + b1 * z + b2*z*z) )* n.e**(- (10**v/10**(vcut0 + vcut1 * z+ vcut2*z*z))**(a0 +a1*z+ a2*z*z) ))

# now outputs the model
xModel = n.arange(n.min(M200c),15,0.1)

X,Y = n.meshgrid(xModel,n.arange(0,n.max(redshift)+0.025,0.025))

Z = vfG(X,Y)

n.savetxt(join(dir,"M200c-cumulative-function-best_fit.txt"),n.transpose([n.hstack((X)), n.hstack((Y)), n.hstack((Z))]) )

#######################################################
# now plots the results of the fit
print "now plots the results of the fit"

vmax_mod, z_mod, n_mod = n.loadtxt(join(dir,"M200c-cumulative-function-best_fit.txt"), unpack=True)


p.figure(0,(6,6))
p.axes([0.17,0.17,0.75,0.75])

sc1=p.scatter(vmax_mod, n_mod, c=z_mod,s=5, marker='o',label="model", rasterized=True)
sc1.set_edgecolor('face')
cb = p.colorbar(shrink=0.8)
cb.set_label("redshift")
p.xlabel(r'log$_{10}[M_{200c}/(h^{-1}M_\odot)]$')
p.ylabel(r' n(>M)') # log$_{10}[ n(>M)]')
p.legend(loc=3)
p.ylim((-9,0))
p.grid()
p.show()

p.savefig("M200c-cumulative-function-model.pdf")
p.clf()


vfG = lambda v, z, A1, vcut1, a1, b1 : n.log10( 10**(A0 + A1 * z) * (1+ (10**v/10**(vcut0 + vcut1 * z))**(b0 + b1 * z) )* n.e**(- (10**v/10**(vcut0 + vcut1 * z))**(a0 +a1*z) ))
vfGbis = lambda v, z, ps : vfG(v,z,ps[0],ps[1],ps[2],ps[3])
chi2fun = lambda ps : n.sum( (vfGbis(M200c,redshift,ps) - yData)**2. / (n.ones_like(yData)*0.05)**2. )/len(yData)
p1 = n.array([ 0., 0., 0., 0.])
print "looks for the optimum parameters"
res = minimize(chi2fun, p1, method='Powell',options={'xtol': 1e-6, 'disp': True, 'maxiter' : 50000000, 'nfev': 1800000})

print "ndof=",len(yData)
print res
A1, vcut1, a1, b1 = n.round(res.x,4)

print "A(z) & = "+str(A0)+" + "+str(A1)+r'\times z \\'
print r" M_{cut}(z) & = "+str(vcut0)+" + "+str(vcut1)+r'\times z \\'
print r" \alpha(z) & = "+str(a0)+" + "+str(a1)+r'\times z \\' #+ '+str(a2)+r'\times z^2 \\'
print r" \beta(z) & = "+str(b0)+" + "+str(b1)+r'\times z \\'


vfG = lambda v, z, vcut1, b1 : n.log10( 10**(A0 ) * (1+ (10**v/10**(vcut0 + vcut1 * z))**(b0 + b1 * z) )* n.e**(- (10**v/10**(vcut0 + vcut1 * z))**(a0 ) ))
vfGbis = lambda v, z, ps : vfG(v,z,ps[0],ps[1])
chi2fun = lambda ps : n.sum( (vfGbis(M200c,redshift,ps) - yData)**2. / (n.ones_like(yData)*0.05)**2. )/len(yData)

p1 = n.array([ 0.,  0.])

print "looks for the optimum parameters"
res = minimize(chi2fun, p1, method='Powell',options={'xtol': 1e-6, 'disp': True, 'maxiter' : 50000000, 'nfev': 1800000})

print "ndof=",len(yData)
print res
A1, vcut1, a1, b1 = n.round(res.x,4)

print "A(z) & = "+str(A0)+" + "+str(A1)+r'\times z \\'
print r" M_{cut}(z) & = "+str(vcut0)+" + "+str(vcut1)+r'\times z \\'
print r" \alpha(z) & = "+str(a0)+" + "+str(a1)+r'\times z \\' #+ '+str(a2)+r'\times z^2 \\'
print r" \beta(z) & = "+str(b0)+" + "+str(b1)+r'\times z \\'


#####################

fig = p.figure(1,(9,9))
ax = fig.add_subplot(111, projection='3d')
dd = ax.plot_wireframe(X, Y, Z, rstride=5, cstride=5)
sc1 = ax.scatter(M200c, redshift,yData, s=n.ones_like(yData)*3, c='r', marker='o',label="MD data", rasterized=True)
sc1.set_edgecolor('face')
ax.legend()
ax.set_xlabel(r'log $M_{200c}$ [km s$^{-1}$]')
ax.set_ylabel('redshift')
ax.set_ylim((0,n.max(redshift)))
ax.set_zlabel(r'log N($>M_{200c}$) [ h$^3$ Mpc$^{-3}$]')
ax.set_zlim((-8,0))
p.show()

#ax.set_yscale('log')
#ax.set_zscale('log')
p.savefig(join(Pdir , "M200c-cumulative-function-allZ-model.pdf"))
p.clf()

fig = p.figure(1,(9,9))
ax = fig.add_subplot(111, projection='3d')
sc1 = ax.scatter(M200c, redshift, 10**yData/10**vfGbis(M200c,redshift,res.x), s=n.ones_like(yData)*3, c='r', marker='o',label="MD data", rasterized=True)
sc1.set_edgecolor('face')
ax.legend()
ax.set_xlabel(r'log $M_{200c}$ [km s$^{-1}$]')
ax.set_ylabel('redshift')
ax.set_ylim((0,zmax))
ax.set_zlabel(r'Data / Model')
ax.set_zlim((0.5,1.5))
#ax.set_yscale('log')
#ax.set_zscale('log')
p.savefig(join(Pdir , "M200c-cumulative-function-allZ-modelRatio.pdf"))
p.clf()








import matplotlib
matplotlib.use('pdf')
matplotlib.rcParams['font.size']=14
import matplotlib.pyplot as p
import astropy.units as u
cvUnit=u.watt.to(u.erg/u.s) # conversion for Drake 2013
import os
from os.path import join
data_dir = os.environ['DATA_DIR']

from LineLuminosityFunction import *
from lineListAir import *
import glob
lineDict = {'O2_3728' : r'$[O^{3728}_{II}]$', 'O3_5007' : r'$[O^{5007}_{III}]$', 'H1_4862' : r'$H^{4861}_{\beta}$', 'H1_6564': r'$H^{6564}_{\alpha}$'}

#########################################################################
#########################################################################
#                    H beta
#########################################################################
#########################################################################
listTxt = n.hstack(( n.array( glob.glob(join(data_dir, "*", "products", "emissionLineLuminosityFunctions", "H1_4862", "H1_4862-DEEP2-z*.txt"))),n.array( glob.glob(join(data_dir, "*", "products", "emissionLineLuminosityFunctions", "H1_4862", "H1_4862-VVDSDEEP-z*.txt"))), n.array( glob.glob(join(data_dir, "*", "products", "emissionLineLuminosityFunctions", "H1_4862", "H1_4862-VVDSWIDE-z*.txt")))  ))
listTxt.sort()

########## Hb Z=0.3
ids = n.array([ 6 ])
fileName = "H1_4862_z0292"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=4862., lineName="H1_4862", cosmology = cosmo, LF_file_list = listToFit, model='Saunders3P', p0=[41.,10**(-1.7), -1.5], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862"), fileName= fileName, fixedSigma = 0.53)

# VVDS WIDE
Lmin, Lmax, Lmean, phi, phiErr, phiErr_poisson, ngals = n.loadtxt(listTxt[11],unpack=True)
sel = (phi>0)&(Lmean>4 * 10**41)
bps0 = [ Lmean[sel], phi[sel], phiErr[sel], 'VVDSWIDE' ]

popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel([bps0])

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1],popt[2])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')
		

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=$'+str(n.round(popt[2],2))+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.292")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862",fileName+".pdf"))
p.clf()

########## Hb Z=0.4
ids = n.array([ 0 ])
fileName = "H1_4862_z0397"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=4862., lineName="H1_4862", cosmology = cosmo, LF_file_list = listToFit, model='Saunders3P', p0=[41.,10**(-1.7), -1.5], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862"), fileName= fileName, fixedSigma = 0.53)


popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel()

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1],popt[2])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=$'+str(n.round(popt[2],2))+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.397")
p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862", fileName+".pdf"))
p.clf()


########## Hb Z=0.5
ids = n.array([ 1 ])
fileName = "H1_4862_z0496"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=4862., lineName="H1_4862", cosmology = cosmo, LF_file_list = listToFit, model='Saunders2P', p0=[41.,10**(-1.7)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862"), fileName= fileName, fixedSigma = 0.53, fixedAlpha=-1.8)

popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel()

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[2])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.8$'+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.496")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862", fileName+".pdf"))
p.clf()


########## Hb Z=0.65
ids = n.array([ 2 ])
fileName = "H1_4862_z0652"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=4862., lineName="H1_4862", cosmology = cosmo, LF_file_list = listToFit,model='Saunders2P', p0=[41.,10**(-1.7)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862"), fileName= fileName, fixedSigma = 0.53, fixedAlpha=-1.8)

popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel()

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[2])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.8$'+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.652")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862", fileName+".pdf"))
p.clf()


########## Hb Z=0.74
ids = n.array([ 3 ]) # 9, 13
fileName = "H1_4862_z0746"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=4862., lineName="H1_4862", cosmology = cosmo, LF_file_list = listToFit, model='Saunders2P', p0=[41.,10**(-1.7)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862"), fileName= fileName, fixedSigma = 0.53, fixedAlpha=-1.8)

popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel()

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[2])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.8$'+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.746")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862", fileName+".pdf"))
p.clf()

########## Hb Z=0.80
ids = n.array([ 4 ])
fileName = "H1_4862_z0775"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=4862., lineName="H1_4862", cosmology = cosmo, LF_file_list = listToFit, model='Saunders2P', p0=[41.,10**(-1.7)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862"), fileName= fileName, fixedSigma = 0.53, fixedAlpha=-1.8)

popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel()

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[2])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.8$'+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.775")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "H1_4862",fileName+".pdf"))
p.clf()


#########################################################################
#########################################################################
#                    O3 5007
#########################################################################
#########################################################################
listTxt = n.hstack(( n.array( glob.glob(join(data_dir, "*", "products", "emissionLineLuminosityFunctions", "O3_5007", "O3_5007-DEEP2-z*.txt"))),n.array( glob.glob(join(data_dir, "*", "products", "emissionLineLuminosityFunctions", "O3_5007", "O3_5007-VVDSDEEP-z*.txt"))), n.array( glob.glob(join(data_dir, "*", "products", "emissionLineLuminosityFunctions", "O3_5007", "O3_5007-VVDSWIDE-z*.txt")))  ))
listTxt.sort()

########## O3 z=0.35
ids = n.array([ 0 ])
fileName = "O3_5007_z0328"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=5007., lineName="O3_5007", cosmology = cosmo, LF_file_list = listToFit, model='Saunders3P', p0=[40.1,10**(-1.8), -1.3], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O3_5007"), fileName= fileName, fixedSigma = 0.53)

aa,bb,cc = n.loadtxt(join(modelFit.biblioPts_dir,"ly-OIII-04.dat"),unpack=True)
bps1=[10**aa,(bb+cc)/2.,(bb-cc)/2.,"L07"]

# VVDS DEEP
Lmin, Lmax, Lmean, phi, phiErr, phiErr_poisson, ngals = n.loadtxt(listTxt[13],unpack=True)
sel = (phi>0)&(Lmean>4 * 10**41)
bps0 = [ Lmean[sel], phi[sel], phiErr[sel], 'VVDSWIDE' ]

bps=[bps0, bps1]
popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel(bps)

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1],popt[2])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=$'+str(n.round(popt[2],2))+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.text(2e42,2e-2,"z=0.35")

p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O3_5007", fileName+".pdf"))
p.clf()

########## O3 z=0.5
ids = n.array([ 2, 7 ])
fileName = "O3_5007_z546"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=5007., lineName="O3_5007", cosmology = cosmo, LF_file_list = listToFit, model='Saunders2P', p0=[40.1,10**(-1.8)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O3_5007"), fileName= fileName, fixedSigma = 0.53, fixedAlpha = -1.4)


popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel()

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.4$'+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.546")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O3_5007", fileName+".pdf"))
p.clf()

########## O3 z=0.65
ids = n.array([ 3 ])
fileName = "O3_5007_z0651"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=5007., lineName="O3_5007", cosmology = cosmo, LF_file_list = listToFit, model='Saunders2P', p0=[40.1,10**(-1.8)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O3_5007"), fileName= fileName, fixedSigma = 0.53, fixedAlpha = -1.4)

dl=n.loadtxt(join(modelFit.biblioPts_dir,"drake-OIII-063-low.csv"),delimiter=',',unpack=True)
du=n.loadtxt(join(modelFit.biblioPts_dir,"drake-OIII-063-up.csv"),delimiter=',',unpack=True)
idu=n.argsort(du[0])
idl=n.argsort(dl[0])
drake025=n.array([dl[0][idl]*cvUnit,dl[1][idl],du[1][idu]])
sel=(n.log10(drake025[0])<41.5)&(n.log10(drake025[0])>41)
bps1=[drake025[0][sel],(drake025[1][sel]+drake025[2][sel])/2.,(-drake025[1][sel]+drake025[2][sel])/2.,"D13"]


bps=[ bps1]
popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel(bps)

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.4$'+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.65")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O3_5007", fileName+".pdf"))
p.clf()

########## O3 z=0.75
ids = n.array([ 4 ])
fileName = "O3_5007_z0740"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=5007., lineName="O3_5007", cosmology = cosmo, LF_file_list = listToFit, model='Saunders2P', p0=[40.1,10**(-1.8)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O3_5007"), fileName= fileName, fixedSigma = 0.53, fixedAlpha = -1.4)

# VVDS WIDE
Lmin, Lmax, Lmean, phi, phiErr, phiErr_poisson, ngals = n.loadtxt(listTxt[16],unpack=True)
sel = (phi>0)&(Lmean>8 * 10**42)
bps0 = [ Lmean[sel], phi[sel], phiErr[sel], 'VVDSWIDE' ]

# VVDS WIDE
Lmin, Lmax, Lmean, phi, phiErr, phiErr_poisson, ngals = n.loadtxt(listTxt[12],unpack=True)
sel = (phi>0)&(Lmean> 3*10**41)&(Lmean < 2*10**42)
bps2 = [ Lmean[sel], phi[sel], phiErr[sel], 'VVDSDEEP' ]

dl=n.loadtxt(join(modelFit.biblioPts_dir,"drake-OIII-083-low.csv"),delimiter=',',unpack=True)
du=n.loadtxt(join(modelFit.biblioPts_dir,"drake-OIII-083-up.csv"),delimiter=',',unpack=True)
idu=n.argsort(du[0])
idl=n.argsort(dl[0])
drake025=n.array([dl[0][idl]*cvUnit,dl[1][idl],du[1][idu]])
sel=(n.log10(drake025[0])<41.5)&(n.log10(drake025[0])>41)
bps1=[drake025[0][sel],(drake025[1][sel]+drake025[2][sel])/2.,(-drake025[1][sel]+drake025[2][sel])/2.,"D13"]


bps=[bps1]
popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel(bps)

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.4$'+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.74")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O3_5007", fileName+".pdf"))
p.clf()


#########################################################################
#########################################################################
#                    O2 3728
#########################################################################
#########################################################################

listTxt = n.hstack(( n.array( glob.glob(join(data_dir, "*", "products", "emissionLineLuminosityFunctions", "O2_3728", "O2_3728-DEEP2-z*.txt"))),n.array( glob.glob(join(data_dir, "*", "products", "emissionLineLuminosityFunctions", "O2_3728", "O2_3728-VVDSDEEP-z*.txt"))), n.array( glob.glob(join(data_dir, "*", "products", "emissionLineLuminosityFunctions", "O2_3728", "O2_3728-VVDSWIDE-z*.txt")))  ))
listTxt.sort()

########## O2 z=0.6
ids = n.array([ 4 ])
fileName = "O2_3728_z0610"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=3727.4228417998916, lineName="O2_3728", cosmology = cosmo, LF_file_list = listToFit, model='Saunders2P', p0=[41.,10**(-1.7)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728"), fileName= fileName, fixedSigma = 0.53, fixedAlpha=-1.8)

# VVDS WIDE
Lmin, Lmax, Lmean, phi, phiErr, phiErr_poisson, ngals = n.loadtxt(listTxt[17],unpack=True)
sel = (phi>0)&(Lmean>41)
bps0 = [ Lmean[sel], phi[sel], phiErr[sel], 'VVDSWIDE' ]

#Drake 2013
dl=n.loadtxt(join(modelFit.biblioPts_dir,"drake-OII-053-low.csv"),delimiter=',',unpack=True)
du=n.loadtxt(join(modelFit.biblioPts_dir,"drake-OII-053-up.csv"),delimiter=',',unpack=True)
idu=n.argsort(du[0])
idl=n.argsort(dl[0])
drake025=n.array([dl[0][idl]*cvUnit,dl[1][idl],du[1][idu]])
sel=(n.log10(drake025[0])<41.5)
bps1=[drake025[0][sel],(drake025[1][sel]+drake025[2][sel])/2.,(-drake025[1][sel]+drake025[2][sel])/2.,"D13"]

aa,bb,cc = n.loadtxt(join(modelFit.biblioPts_dir, "comparat2014-LF-0.500-z-0.695.dat"), unpack=True,usecols=(2,3,4))
sel = (aa>41)
bps2=[10**aa[sel],bb[sel],cc[sel],"C15"]

bps=[bps2]
popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel(bps)

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[2])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.75])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.8$ '+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.6")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728", fileName+".pdf"))
p.clf()
#"""
########## O2 z=0.75
#"""
ids = n.array([ 8 ])
fileName = "O2_3728_z0745"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=3727.4228417998916, lineName="O2_3728", cosmology = cosmo, LF_file_list = listToFit, model='Saunders2P', p0=[41.,10**(-1.7)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728"), fileName= fileName, fixedSigma = 0.53, fixedAlpha = -1.8)

# VVDS WIDE
Lmin, Lmax, Lmean, phi, phiErr, phiErr_poisson, ngals = n.loadtxt(listTxt[21],unpack=True)
sel = (phi>0)&(Lmean>5*10**42)
bps0 = [ Lmean[sel], phi[sel], phiErr[sel], 'VVDSWIDE' ]

aa,bb,cc = n.loadtxt(join(modelFit.biblioPts_dir, "comparat2014-LF-0.695-z-0.88.dat"), unpack=True,usecols=(2,3,4))
sel = (aa>41)
bps2=[10**aa[sel],bb[sel],cc[sel],"C15"]

bps=[bps0,bps2]
popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel(bps)

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[2])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.75])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.8$ '+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.75")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728", fileName+".pdf"))
p.clf()

#"""

########## O2 z=0.8
#"""
ids = n.array([ 1 ])
fileName = "O2_3728_z0804"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=3727.4228417998916, lineName="O2_3728", cosmology = cosmo, LF_file_list = listToFit, model='Saunders2P', p0=[41.,10**(-1.7)], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728"), fileName= fileName, fixedSigma = 0.53, fixedAlpha=-1.8)

popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel()

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1])#,popt[2])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.75])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=-1.8$ '+r', $\sigma=0.53$',fontsize=12)

p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.text(2e42,2e-2,"z=0.8")

p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728", fileName+".pdf"))
p.clf()
#"""

########## O2 z=0.93 
#"""
ids = n.array([2, 11 ])
fileName = "O2_3728_z0935"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=3727.4228417998916, lineName="O2_3728", cosmology = cosmo, LF_file_list = listToFit, model='Saunders', p0=[41.,10**(-1.7), -1.5,0.5], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728"), fileName= fileName)

aa,bb,cc = n.loadtxt(join(modelFit.biblioPts_dir, "comparat2014-LF-0.880-z-1.09.dat"), unpack=True,usecols=(2,3,4))
bps0=[10**aa[(aa>42.3)&(aa<43.3)],bb[(aa>42.3)&(aa<43.3)],cc[(aa>42.3)&(aa<43.3)],"C15"]

aa,bb,cc = n.loadtxt(join(modelFit.biblioPts_dir,"ly-OII-09.dat"),unpack=True)
bps1=[10**aa,(bb+cc)/2.,(bb-cc)/2.,"L07"]
bps=[bps0,bps1]
popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel(bps)

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1],popt[2],popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit')
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+str(n.round(n.log10(popt[1]),2))+r', $\alpha=$'+str(n.round(popt[2],2))+r', $\sigma=$'+str(n.round(popt[3],2)),fontsize=12)
p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.text(2e42,2e-2,"z=0.93")

p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.grid()
gl = p.legend(loc=3,fontsize=12)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728", fileName+".pdf"))
p.clf()
#"""

########## O2 z=1.20
#"""
ids = n.array([  3 ])
fileName = "O2_3728_z120"
listFits = n.array([ el[:-4]+".fits" for el in listTxt[ids]])
listToFit = n.transpose([listFits, listTxt[ids]])
modelFit = ModelLuminosityFunction(lineWavelength=3727.4228417998916, lineName="O2_3728", cosmology = cosmo, LF_file_list = listToFit, model='Saunders', p0=[41.,10**(-1.7), -1.5,0.53], outputDirectory= join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728"), fileName= fileName)

aa,bb,cc = n.loadtxt(join(modelFit.biblioPts_dir, "comparat2014-LF-1.090-z-1.34.dat"), unpack=True,usecols=(2,3,4))
sel=(aa>42.)&(aa<43.)
bps0=[10**aa[sel],bb[sel],cc[sel],"C15"]

dl=n.loadtxt(join(modelFit.biblioPts_dir,"drake-OII-119-low.csv"),delimiter=',',unpack=True)
du=n.loadtxt(join(modelFit.biblioPts_dir,"drake-OII-119-up.csv"),delimiter=',',unpack=True)
idu=n.argsort(du[0])
idl=n.argsort(dl[0])
drake025=n.array([dl[0][idl]*cvUnit,dl[1][idl],du[1][idu]])
sel=(n.log10(drake025[0])<41.5)
bps1=[drake025[0][sel],(drake025[1][sel]+drake025[2][sel])/2.,(-drake025[1][sel]+drake025[2][sel])/2.,"D13"]

# VVDS DEEP
Lmin, Lmax, Lmean, phi, phiErr, phiErr_poisson, ngals = n.loadtxt(listTxt[14],unpack=True)
sel = (phi>0)&(Lmean>8*10**41)&(Lmean<4*10**42)
bps2 = [ Lmean[sel], phi[sel], phiErr[sel], 'VVDSDEEP' ]

bps=[bps0, bps1, bps2]

popt,popc,xF,yF,yeF, x, y, ye, name=modelFit.fitModel(bps)

yM = modelFit.model_to_fit(n.log10(xF),popt[0],popt[1],popt[2],popt[3])

p.figure(1,(4.5,4.5))
p.axes([0.2,0.2,0.75,0.7])
for ii in range(len(x)):
	if name[ii]=="VVDSWIDE":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='g')
	elif name[ii]=="VVDSDEEP":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='b')
	elif name[ii]=="DEEP2":
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='r')
	else :
		p.errorbar(x[ii],y[ii],yerr=ye[ii],label=name[ii],fmt='o',elinewidth=2, mfc='none',color='m')

p.plot(xF,yM,label='fit',color='k',lw=2 )
p.title(r'$L_*=$'+str(n.round(popt[0],2))+r', $\phi_*=$'+ str(n.round(n.log10(popt[1]),2)) +r', $\alpha=$'+ str(n.round(popt[2],2))+r', $\sigma=$'+ str(n.round(popt[3],2)) ,fontsize=12)
p.xlabel(r'$log_{10}(L$'+lineDict[modelFit.lineName]+'$)$ [erg s$^{-1}$]')
p.ylabel(r'$\Phi$ [Mpc$^{-3}/$dlog L]')
p.yscale('log')
p.xscale('log')
p.xlim((1e39,1e44))
p.ylim((1e-6,1e-1))
p.text(2e42,2e-2,"z=1.2")

p.grid()
gl = p.legend(loc=3,fontsize=10)
gl.set_frame_on(False)
p.savefig(join(data_dir, "Products_Galaxies", "emissionLineLuminosityFunctions", "O2_3728", fileName+".pdf"))
p.clf()

#"""

#modelFit

import sys
sys.exit()

# from VVDS DEEP survey
print "VVDS DEEP"
zsVIMOSmin=n.array([0.18,0.41,0.51,0.65,0.84, 1.1])
zsVIMOSmax=n.array([0.41,0.65,0.7,0.84,1.1, 1.3])
linesFittedVIMOS=n.array([ [[H1_6564,"H1_6564"],[H1_4862,"H1_4862"],[O3_5007,"O3_5007"]], [[O3_5007,"O3_5007"],[H1_4862,"H1_4862"]], [[O3_5007,"O3_5007"],[O2_mean,"O2_3728"],[H1_4862,"H1_4862"]], [[O3_5007,"O3_5007"],[O2_mean,"O2_3728"],[H1_4862,"H1_4862"]], [[O2_mean,"O2_3728"]], [[O2_mean,"O2_3728"]] ])

areaDeep=0.61
#areaUDeep=512./3600.

for ii in range(len(zsVIMOSmin)):
	zmin = zsVIMOSmin[ii]
	zmax = zsVIMOSmax[ii]
	lineSet=linesFittedVIMOS[ii]
	for line in lineSet :
		lf = LineLuminosityFunction(lineWavelength=line[0], lineName=line[1], cosmology = cosmo, surveyName =  "VVDS", redshift_catalog = "VVDS_DEEP_summary.LFcatalog.fits", luminosityBins = n.logspace(38,45,50), Nstack = 400, Nclustering = 400, outputFolder="emissionLineLuminosityFunctions/" , zmin = zmin, zmax = zmax)
		lf.setRedshiftArray( redshiftColumn='Z' )
		lf.setRedshiftSelection( redshiftQualityColumn='ZFLAGS', lowerBound=1.9, upperBound=9.1)
		lf.setWeightArray( 1./(areaDeep * lf.catalog['SSR']*lf.catalog['TSR']) )
		selection = (lf.catalog['TSR']>0) & (lf.catalog['SSR']>0)
		lf.computeHistogramLF(selection)
		print "---------------------------------------------------"
		print line, zmin, zmax, lf.ngals
		lf.computeHistogramVariance(selection,jk=0.1)
		lf.computeMeanWeightedRedshift(selection)
		lf.get_completness_limit(selection)
		lf.writeLF(selection,surveyNameSuffix="DEEP")



# from VVDS WIDE survey
areaWide=4.0+2.2+1.9
zsVIMOSmin=n.array([0.18,0.41,0.51,0.65,0.84, 1.1])
zsVIMOSmax=n.array([0.41,0.65,0.7,0.84,1.1, 1.3])
linesFittedVIMOS=n.array([ [[H1_6564,"H1_6564"],[H1_4862,"H1_4862"],[O3_5007,"O3_5007"]], [[O3_5007,"O3_5007"],[H1_4862,"H1_4862"]], [[O3_5007,"O3_5007"],[O2_mean,"O2_3728"],[H1_4862,"H1_4862"]], [[O3_5007,"O3_5007"],[O2_mean,"O2_3728"],[H1_4862,"H1_4862"]], [[O2_mean,"O2_3728"]],[[O2_mean,"O2_3728"]] ])


for ii in range(len(zsVIMOSmin)):
	zmin = zsVIMOSmin[ii]
	zmax = zsVIMOSmax[ii]
	lineSet=linesFittedVIMOS[ii]
	for line in lineSet :
		print "---------------------------------------------------"
		print line, zmin, zmax
		lf = LineLuminosityFunction(lineWavelength=line[0], lineName=line[1], cosmology = cosmo, surveyName =  "VVDS", redshift_catalog = "VVDS_WIDE_summary.LFcatalog.fits", luminosityBins = n.logspace(38,45,50), Nstack = 400, Nclustering = 400, outputFolder="emissionLineLuminosityFunctions/" , zmin = zmin, zmax = zmax)
		lf.setRedshiftArray( redshiftColumn='Z' )
		lf.setRedshiftSelection( redshiftQualityColumn='ZFLAGS', lowerBound=1.9, upperBound=9.1)
		lf.setWeightArray( 1./(areaWide * lf.catalog['SSR']*lf.catalog['TSR']) )
		selection = (lf.catalog['TSR']>0) & (lf.catalog['SSR']>0)
		lf.computeHistogramLF(selection)
		lf.computeHistogramVariance(selection,jk=0.1)
		lf.computeMeanWeightedRedshift(selection)
		lf.get_completness_limit(selection)
		lf.writeLF(selection,surveyNameSuffix="WIDE")



# from DEEP2 survey
zsDEEP2min=n.array([0.17,0.33,0.33,0.4,0.45,0.50,0.60,0.70,0.78,0.83, 1.16 ])
zsDEEP2max=n.array([0.36,0.40,0.45,0.5,0.55,0.60,0.70,0.78,0.83,1.03, 1.3 ])
linesFittedDEEP2=n.array([[[H1_6564,"H1_6564"]], [[O3_5007,"O3_5007"]], [[H1_4862,"H1_4862"]], [[O3_5007,"O3_5007"]],[[H1_4862,"H1_4862"]], [[O3_5007,"O3_5007"]], [[O3_5007,"O3_5007"],[H1_4862,"H1_4862"]], [[O3_5007,"O3_5007"],[H1_4862,"H1_4862"]], [[H1_4862,"H1_4862"],[O2_mean,"O2_3728"]], [[O2_mean,"O2_3728"]], [[O2_mean,"O2_3728"]] ])
area1=0.60
area2=0.62
area3=0.90
area4=0.66
areaAll=area1+area2+area3+area4

for ii in range(len(zsDEEP2min)):
	zmin = zsDEEP2min[ii]
	zmax = zsDEEP2max[ii]
	lineSet=linesFittedDEEP2[ii]
	for line in lineSet :
		print "---------------------------------------------------"
		print line, zmin, zmax
		lf = LineLuminosityFunction(lineWavelength=line[0], lineName=line[1], cosmology = cosmo, surveyName =  "DEEP2", redshift_catalog = "zcat.deep2.dr4.v2.LFcatalog.fits", luminosityBins = n.logspace(38,45,50), Nstack = 400, Nclustering = 400, outputFolder="emissionLineLuminosityFunctions/" , zmin = zmin, zmax = zmax)
		lf.setRedshiftArray( redshiftColumn='ZBEST' )
		lf.setRedshiftSelection( redshiftQualityColumn='ZQUALITY', lowerBound=0.9, upperBound=7.)
		if zmin < 0.7:
			selection = (lf.catalog['TSR']>0) & (lf.catalog['SSR']>0) & (lf.catalog['DEC']>50.)
			lf.setWeightArray( 1./(area1 * lf.catalog['SSR']*lf.catalog['TSR']) )

		if zmin >= 0.7:
			lf.setWeightArray( 1./(areaAll * lf.catalog['SSR']*lf.catalog['TSR']) )
			selection = (lf.catalog['TSR']>0) & (lf.catalog['SSR']>0)

		lf.computeHistogramLF(selection)
		lf.computeHistogramVariance(selection,jk=0.1)
		lf.computeMeanWeightedRedshift(selection)
		lf.get_completness_limit(selection)
		lf.writeLF(selection)



import sys
sys.exit()

# from VIPERS survey
print "VIPERS"
zsVIMOSmin=n.array([0.65,0.84, 1.1])
zsVIMOSmax=n.array([0.84,1.1, 1.3])
linesFittedVIMOS=n.array([ [[O3_5007,"O3_5007"],[O2_mean,"O2_3728"],[H1_4862,"H1_4862"]], [[O2_mean,"O2_3728"]], [[O2_mean,"O2_3728"]]])

area=24.

for ii in range(len(zsVIMOSmin)):
	zmin = zsVIMOSmin[ii]
	zmax = zsVIMOSmax[ii]
	lineSet=linesFittedVIMOS[ii]
	for line in lineSet :
		lf = LineLuminosityFunction(lineWavelength=line[0], lineName=line[1], cosmology = cosmo, surveyName =  "VIPERS", redshift_catalog = "VIPERS_W14_summary_v1.LFcatalog.fits", luminosityBins = n.logspace(38,45,50), Nstack = 400, Nclustering = 400, outputFolder="emissionLineLuminosityFunctions/" , zmin = zmin, zmax = zmax)
		lf.setRedshiftArray( redshiftColumn='zspec' )
		lf.setRedshiftSelection( redshiftQualityColumn='zflg', lowerBound=0.9, upperBound=100.)
		lf.setWeightArray( 1./(area * lf.catalog['SSR']*lf.catalog['TSR']) )
		selection = (lf.catalog['TSR']>0) & (lf.catalog['SSR']>0)
		lf.computeHistogramLF(selection)
		print "---------------------------------------------------"
		print line, zmin, zmax, lf.ngals
		lf.computeHistogramVariance(selection,jk=0.1)
		lf.computeMeanWeightedRedshift(selection)
		lf.get_completness_limit(selection)
		lf.writeLF(selection)#,surveyNameSuffix="DEEP")

